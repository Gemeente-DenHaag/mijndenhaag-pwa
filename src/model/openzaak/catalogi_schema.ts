/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/besluittypen": {
    /** Deze lijst kan gefilterd wordt met query-string parameters. */
    get: operations["besluittype_list"];
    /** Maak een BESLUITTYPE aan. */
    post: operations["besluittype_create"];
    parameters: {};
  };
  "/besluittypen/{uuid}": {
    /** Een specifieke BESLUITTYPE opvragen. */
    get: operations["besluittype_read"];
    /**
     * Werk een BESLUITTYPE in zijn geheel bij. Dit kan alleen als het een concept
     * betreft.
     */
    put: operations["besluittype_update"];
    /** Verwijder een BESLUITTYPE. Dit kan alleen als het een concept betreft. */
    delete: operations["besluittype_delete"];
    /** Vraag de headers op die je bij een GET request zou krijgen. */
    head: operations["besluittype_headers"];
    /** Werk een BESLUITTYPE deels bij. Dit kan alleen als het een concept betreft. */
    patch: operations["besluittype_partial_update"];
    parameters: {
      path: {
        /** Unieke resource identifier (UUID4) */
        uuid: string;
      };
    };
  };
  "/besluittypen/{uuid}/publish": {
    /**
     * Alle BESLUITTYPEn van de besluiten die het resultaat kunnen zijn van het
     * zaakgericht werken van de behandelende organisatie(s).
     */
    post: operations["besluittype_publish"];
    parameters: {
      path: {
        /** Unieke resource identifier (UUID4) */
        uuid: string;
      };
    };
  };
  "/catalogussen": {
    /** Deze lijst kan gefilterd wordt met query-string parameters. */
    get: operations["catalogus_list"];
    /** Maak een CATALOGUS aan. */
    post: operations["catalogus_create"];
    parameters: {};
  };
  "/catalogussen/{uuid}": {
    /** Een specifieke CATALOGUS opvragen. */
    get: operations["catalogus_read"];
    /** Vraag de headers op die je bij een GET request zou krijgen. */
    head: operations["catalogus_headers"];
    parameters: {
      path: {
        /** Unieke resource identifier (UUID4) */
        uuid: string;
      };
    };
  };
  "/eigenschappen": {
    /** Deze lijst kan gefilterd wordt met query-string parameters. */
    get: operations["eigenschap_list"];
    /**
     * Maak een EIGENSCHAP aan. Dit kan alleen als het bijbehorende ZAAKTYPE een
     * concept betreft.
     */
    post: operations["eigenschap_create"];
    parameters: {};
  };
  "/eigenschappen/{uuid}": {
    /** Een specifieke EIGENSCHAP opvragen. */
    get: operations["eigenschap_read"];
    /**
     * Werk een EIGENSCHAP in zijn geheel bij. Dit kan alleen als het
     * bijbehorende ZAAKTYPE een concept betreft.
     */
    put: operations["eigenschap_update"];
    /**
     * Verwijder een EIGENSCHAP. Dit kan alleen als het bijbehorende ZAAKTYPE een
     * concept betreft.
     */
    delete: operations["eigenschap_delete"];
    /** Vraag de headers op die je bij een GET request zou krijgen. */
    head: operations["eigenschap_headers"];
    /**
     * Werk een EIGENSCHAP deels bij. Dit kan alleen als het bijbehorende
     * ZAAKTYPE een concept betreft.
     */
    patch: operations["eigenschap_partial_update"];
    parameters: {
      path: {
        /** Unieke resource identifier (UUID4) */
        uuid: string;
      };
    };
  };
  "/informatieobjecttypen": {
    /** Deze lijst kan gefilterd wordt met query-string parameters. */
    get: operations["informatieobjecttype_list"];
    /** Maak een INFORMATIEOBJECTTYPE aan. */
    post: operations["informatieobjecttype_create"];
    parameters: {};
  };
  "/informatieobjecttypen/{uuid}": {
    /** Een specifieke INFORMATIEOBJECTTYPE opvragen. */
    get: operations["informatieobjecttype_read"];
    /**
     * Werk een INFORMATIEOBJECTTYPE in zijn geheel bij. Dit kan alleen als het een
     * concept betreft.
     */
    put: operations["informatieobjecttype_update"];
    /**
     * Verwijder een INFORMATIEOBJECTTYPE. Dit kan alleen als het een concept
     * betreft.
     */
    delete: operations["informatieobjecttype_delete"];
    /** Vraag de headers op die je bij een GET request zou krijgen. */
    head: operations["informatieobjecttype_headers"];
    /**
     * Werk een INFORMATIEOBJECTTYPE deels bij. Dit kan alleen als het een concept
     * betreft.
     */
    patch: operations["informatieobjecttype_partial_update"];
    parameters: {
      path: {
        /** Unieke resource identifier (UUID4) */
        uuid: string;
      };
    };
  };
  "/informatieobjecttypen/{uuid}/publish": {
    /**
     * Een INFORMATIEOBJECTTYPE beschijft de karakteristieken van een document of
     * ander object dat informatie bevat.
     */
    post: operations["informatieobjecttype_publish"];
    parameters: {
      path: {
        /** Unieke resource identifier (UUID4) */
        uuid: string;
      };
    };
  };
  "/resultaattypen": {
    /** Deze lijst kan gefilterd wordt met query-string parameters. */
    get: operations["resultaattype_list"];
    /**
     * Maak een RESULTAATTYPE aan. Dit kan alleen als het bijbehorende ZAAKTYPE een
     * concept betreft.
     */
    post: operations["resultaattype_create"];
    parameters: {};
  };
  "/resultaattypen/{uuid}": {
    /** Een specifieke RESULTAATTYPE opvragen. */
    get: operations["resultaattype_read"];
    /**
     * Werk een RESULTAATTYPE in zijn geheel bij. Dit kan alleen als het
     * bijbehorende ZAAKTYPE een concept betreft.
     */
    put: operations["resultaattype_update"];
    /**
     * Verwijder een RESULTAATTYPE. Dit kan alleen als het bijbehorende ZAAKTYPE
     * een concept betreft.
     */
    delete: operations["resultaattype_delete"];
    /** Vraag de headers op die je bij een GET request zou krijgen. */
    head: operations["resultaattype_headers"];
    /**
     * Werk een RESULTAATTYPE deels bij. Dit kan alleen als het bijbehorende
     * ZAAKTYPE een concept betreft.
     */
    patch: operations["resultaattype_partial_update"];
    parameters: {
      path: {
        /** Unieke resource identifier (UUID4) */
        uuid: string;
      };
    };
  };
  "/roltypen": {
    /** Deze lijst kan gefilterd wordt met query-string parameters. */
    get: operations["roltype_list"];
    /**
     * Maak een ROLTYPE aan. Dit kan alleen als het bijbehorende ZAAKTYPE een
     * concept betreft.
     */
    post: operations["roltype_create"];
    parameters: {};
  };
  "/roltypen/{uuid}": {
    /** Een specifieke ROLTYPE opvragen. */
    get: operations["roltype_read"];
    /**
     * Werk een ROLTYPE in zijn geheel bij. Dit kan alleen als het
     * bijbehorende ZAAKTYPE een concept betreft.
     */
    put: operations["roltype_update"];
    /**
     * Verwijder een ROLTYPE. Dit kan alleen als het bijbehorende ZAAKTYPE een
     * concept betreft.
     */
    delete: operations["roltype_delete"];
    /** Vraag de headers op die je bij een GET request zou krijgen. */
    head: operations["roltype_headers"];
    /**
     * Werk een ROLTYPE deels bij. Dit kan alleen als het bijbehorende
     * ZAAKTYPE een concept betreft.
     */
    patch: operations["roltype_partial_update"];
    parameters: {
      path: {
        uuid: string;
      };
    };
  };
  "/statustypen": {
    /** Deze lijst kan gefilterd wordt met query-string parameters. */
    get: operations["statustype_list"];
    /**
     * Maak een STATUSTYPE aan. Dit kan alleen als het bijbehorende ZAAKTYPE een
     * concept betreft.
     */
    post: operations["statustype_create"];
    parameters: {};
  };
  "/statustypen/{uuid}": {
    /** Een specifieke STATUSTYPE opvragen. */
    get: operations["statustype_read"];
    /**
     * Werk een STATUSTYPE in zijn geheel bij. Dit kan alleen als het
     * bijbehorende ZAAKTYPE een concept betreft.
     */
    put: operations["statustype_update"];
    /**
     * Verwijder een STATUSTYPE. Dit kan alleen als het bijbehorende ZAAKTYPE een
     * concept betreft.
     */
    delete: operations["statustype_delete"];
    /** Vraag de headers op die je bij een GET request zou krijgen. */
    head: operations["statustype_headers"];
    /**
     * Werk een STATUSTYPE deels bij. Dit kan alleen als het bijbehorende
     * ZAAKTYPE een concept betreft.
     */
    patch: operations["statustype_partial_update"];
    parameters: {
      path: {
        /** Unieke resource identifier (UUID4) */
        uuid: string;
      };
    };
  };
  "/zaaktype-informatieobjecttypen": {
    /** Deze lijst kan gefilterd wordt met query-string parameters. */
    get: operations["zaakinformatieobjecttype_list"];
    /**
     * Maak een ZAAKTYPE-INFORMATIEOBJECTTYPE relatie aan. Dit kan alleen als het
     * bijbehorende ZAAKTYPE een concept betreft.
     *
     * Er wordt gevalideerd op:
     * - `zaaktype` en `informatieobjecttype` behoren tot dezelfde `catalogus`
     */
    post: operations["zaakinformatieobjecttype_create"];
    parameters: {};
  };
  "/zaaktype-informatieobjecttypen/{uuid}": {
    /** Een specifieke ZAAKTYPE-INFORMATIEOBJECTTYPE relatie opvragen. */
    get: operations["zaakinformatieobjecttype_read"];
    /**
     * Werk een ZAAKTYPE-INFORMATIEOBJECTTYPE relatie in zijn geheel bij. Dit kan
     * alleen als het bijbehorende ZAAKTYPE een concept betreft.
     *
     * Er wordt gevalideerd op:
     * - `zaaktype` en `informatieobjecttype` behoren tot dezelfde `catalogus`
     */
    put: operations["zaakinformatieobjecttype_update"];
    /**
     * Verwijder een ZAAKTYPE-INFORMATIEOBJECTTYPE relatie. Dit kan alleen als
     * het bijbehorende ZAAKTYPE een concept betreft.
     *
     * Er wordt gevalideerd op:
     * - `zaaktype` of `informatieobjecttype` is nog niet gepubliceerd
     */
    delete: operations["zaakinformatieobjecttype_delete"];
    /** Vraag de headers op die je bij een GET request zou krijgen. */
    head: operations["zaakinformatieobjecttype_headers"];
    /**
     * Werk een ZAAKTYPE-INFORMATIEOBJECTTYPE relatie deels bij. Dit kan alleen
     * als het bijbehorende ZAAKTYPE een concept betreft.
     *
     * Er wordt gevalideerd op:
     * - `zaaktype` en `informatieobjecttype` behoren tot dezelfde `catalogus`
     */
    patch: operations["zaakinformatieobjecttype_partial_update"];
    parameters: {
      path: {
        /** Unieke resource identifier (UUID4) */
        uuid: string;
      };
    };
  };
  "/zaaktypen": {
    /** Deze lijst kan gefilterd wordt met query-string parameters. */
    get: operations["zaaktype_list"];
    /**
     * Maak een ZAAKTYPE aan.
     *
     * Er wordt gevalideerd op:
     * - geldigheid `catalogus` URL, dit moet een catalogus binnen dezelfde API zijn
     * - Uniciteit `catalogus` en `omschrijving`. Dezelfde omeschrijving mag enkel
     *   opnieuw gebruikt worden als het zaaktype een andere geldigheidsperiode
     *   kent dan bestaande zaaktypen.
     * - `deelzaaktypen` moeten tot dezelfde catalogus behoren als het ZAAKTYPE.
     */
    post: operations["zaaktype_create"];
    parameters: {};
  };
  "/zaaktypen/{uuid}": {
    /** Een specifieke ZAAKTYPE opvragen. */
    get: operations["zaaktype_read"];
    /**
     * Werk een ZAAKTYPE in zijn geheel bij. Dit kan alleen als het een concept
     * betreft.
     *
     * Er wordt gevalideerd op:
     * - `deelzaaktypen` moeten tot dezelfde catalogus behoren als het ZAAKTYPE.
     */
    put: operations["zaaktype_update"];
    /** Verwijder een ZAAKTYPE. Dit kan alleen als het een concept betreft. */
    delete: operations["zaaktype_delete"];
    /** Vraag de headers op die je bij een GET request zou krijgen. */
    head: operations["zaaktype_headers"];
    /**
     * Werk een ZAAKTYPE deels bij. Dit kan alleen als het een concept betreft.
     *
     * Er wordt gevalideerd op:
     * - `deelzaaktypen` moeten tot dezelfde catalogus behoren als het ZAAKTYPE.
     */
    patch: operations["zaaktype_partial_update"];
    parameters: {
      path: {
        /** Unieke resource identifier (UUID4) */
        uuid: string;
      };
    };
  };
  "/zaaktypen/{uuid}/publish": {
    /**
     * Een ZAAKTYPE beschrijft het geheel van karakteristieke eigenschappen van
     * zaken van eenzelfde soort.
     */
    post: operations["zaaktype_publish"];
    parameters: {
      path: {
        /** Unieke resource identifier (UUID4) */
        uuid: string;
      };
    };
  };
}

export interface components {
  schemas: {
    BesluitType: {
      /** URL-referentie naar dit object. Dit is de unieke identificatie en locatie van dit object. */
      url?: string;
      /** URL-referentie naar de CATALOGUS waartoe dit BESLUITTYPE behoort. */
      catalogus: string;
      /** ZAAKTYPE met ZAAKen die relevant kunnen zijn voor dit BESLUITTYPE */
      zaaktypen: string[];
      /** Omschrijving van de aard van BESLUITen van het BESLUITTYPE. */
      omschrijving?: string;
      /** Algemeen gehanteerde omschrijving van de aard van BESLUITen van het BESLUITTYPE */
      omschrijvingGeneriek?: string;
      /** Typering van de aard van BESLUITen van het BESLUITTYPE. */
      besluitcategorie?: string;
      /** Een tijdsduur in ISO 8601 formaat, gerekend vanaf de verzend- of publicatiedatum, waarbinnen verweer tegen een besluit van het besluittype mogelijk is. */
      reactietermijn?: string | null;
      /** Aanduiding of BESLUITen van dit BESLUITTYPE gepubliceerd moeten worden. */
      publicatieIndicatie: boolean;
      /** De generieke tekst van de publicatie van BESLUITen van dit BESLUITTYPE */
      publicatietekst?: string;
      /** Een tijdsduur in ISO 8601 formaat, gerekend vanaf de verzend- of publicatiedatum, dat BESLUITen van dit BESLUITTYPE gepubliceerd moeten blijven. */
      publicatietermijn?: string | null;
      /** Een eventuele toelichting op dit BESLUITTYPE. */
      toelichting?: string;
      /** URL-referenties naar het INFORMATIEOBJECTTYPE van informatieobjecten waarin besluiten van dit BESLUITTYPE worden vastgelegd. */
      informatieobjecttypen: string[];
      /** De datum waarop het is ontstaan. */
      beginGeldigheid: string;
      /** De datum waarop het is opgeheven. */
      eindeGeldigheid?: string | null;
      /** Geeft aan of het object een concept betreft. Concepten zijn niet-definitieve versies en zouden niet gebruikt moeten worden buiten deze API. */
      concept?: boolean;
    };
    Fout: {
      /** URI referentie naar het type fout, bedoeld voor developers */
      type?: string;
      /** Systeemcode die het type fout aangeeft */
      code: string;
      /** Generieke titel voor het type fout */
      title: string;
      /** De HTTP status code */
      status: number;
      /** Extra informatie bij de fout, indien beschikbaar */
      detail: string;
      /** URI met referentie naar dit specifiek voorkomen van de fout. Deze kan gebruikt worden in combinatie met server logs, bijvoorbeeld. */
      instance: string;
    };
    FieldValidationError: {
      /** Naam van het veld met ongeldige gegevens */
      name: string;
      /** Systeemcode die het type fout aangeeft */
      code: string;
      /** Uitleg wat er precies fout is met de gegevens */
      reason: string;
    };
    ValidatieFout: {
      /** URI referentie naar het type fout, bedoeld voor developers */
      type?: string;
      /** Systeemcode die het type fout aangeeft */
      code: string;
      /** Generieke titel voor het type fout */
      title: string;
      /** De HTTP status code */
      status: number;
      /** Extra informatie bij de fout, indien beschikbaar */
      detail: string;
      /** URI met referentie naar dit specifiek voorkomen van de fout. Deze kan gebruikt worden in combinatie met server logs, bijvoorbeeld. */
      instance: string;
      invalidParams: components["schemas"]["FieldValidationError"][];
    };
    Catalogus: {
      /** URL-referentie naar dit object. Dit is de unieke identificatie en locatie van dit object. */
      url?: string;
      /** Een afkorting waarmee wordt aangegeven voor welk domein in een CATALOGUS ZAAKTYPEn zijn uitgewerkt. */
      domein: string;
      /** Het door een kamer toegekend uniek nummer voor de INGESCHREVEN NIET-NATUURLIJK PERSOON die de eigenaar is van een CATALOGUS. */
      rsin: string;
      /** De naam van de contactpersoon die verantwoordelijk is voor het beheer van de CATALOGUS. */
      contactpersoonBeheerNaam: string;
      /** Het telefoonnummer van de contactpersoon die verantwoordelijk is voor het beheer van de CATALOGUS. */
      contactpersoonBeheerTelefoonnummer?: string;
      /** Het emailadres van de contactpersoon die verantwoordelijk is voor het beheer van de CATALOGUS. */
      contactpersoonBeheerEmailadres?: string;
      /** URL-referenties naar ZAAKTYPEn die in deze CATALOGUS worden ontsloten. */
      zaaktypen?: string[];
      /** URL-referenties naar BESLUITTYPEn die in deze CATALOGUS worden ontsloten. */
      besluittypen?: string[];
      /** URL-referenties naar INFORMATIEOBJECTTYPEn die in deze CATALOGUS worden ontsloten. */
      informatieobjecttypen?: string[];
    };
    EigenschapSpecificatie: {
      /** Benaming van het object of groepattribuut waarvan de EIGENSCHAP een inhoudelijk gegeven specificeert. */
      groep?: string;
      /**
       * Het soort tekens waarmee waarden van de EIGENSCHAP kunnen worden vastgelegd.
       *
       * Uitleg bij mogelijke waarden:
       *
       * * `tekst` - Tekst
       * * `getal` - Getal
       * * `datum` - Datum
       * * `datum_tijd` - Datum/tijd
       */
      formaat: "tekst" | "getal" | "datum" | "datum_tijd";
      /** Het aantal karakters (lengte) waarmee waarden van de EIGENSCHAP worden vastgelegd. */
      lengte: string;
      /** Het aantal mogelijke voorkomens van waarden van deze EIGENSCHAP bij een zaak van het ZAAKTYPE. */
      kardinaliteit: string;
      /** Waarden die deze EIGENSCHAP kan hebben. */
      waardenverzameling?: string[];
    };
    Eigenschap: {
      /** URL-referentie naar dit object. Dit is de unieke identificatie en locatie van dit object. */
      url?: string;
      /** De naam van de EIGENSCHAP */
      naam: string;
      /** De beschrijving van de betekenis van deze EIGENSCHAP */
      definitie: string;
      specificatie: components["schemas"]["EigenschapSpecificatie"];
      /** Een toelichting op deze EIGENSCHAP en het belang hiervan voor zaken van dit ZAAKTYPE. */
      toelichting?: string;
      /** URL-referentie naar het ZAAKTYPE van de ZAAKen waarvoor deze EIGENSCHAP van belang is. */
      zaaktype: string;
    };
    InformatieObjectType: {
      /** URL-referentie naar dit object. Dit is de unieke identificatie en locatie van dit object. */
      url?: string;
      /** URL-referentie naar de CATALOGUS waartoe dit INFORMATIEOBJECTTYPE behoort. */
      catalogus: string;
      /** Omschrijving van de aard van informatieobjecten van dit INFORMATIEOBJECTTYPE. */
      omschrijving: string;
      /**
       * Aanduiding van de mate waarin informatieobjecten van dit INFORMATIEOBJECTTYPE voor de openbaarheid bestemd zijn.
       *
       * Uitleg bij mogelijke waarden:
       *
       * * `openbaar` - Openbaar
       * * `beperkt_openbaar` - Beperkt openbaar
       * * `intern` - Intern
       * * `zaakvertrouwelijk` - Zaakvertrouwelijk
       * * `vertrouwelijk` - Vertrouwelijk
       * * `confidentieel` - Confidentieel
       * * `geheim` - Geheim
       * * `zeer_geheim` - Zeer geheim
       */
      vertrouwelijkheidaanduiding:
        | "openbaar"
        | "beperkt_openbaar"
        | "intern"
        | "zaakvertrouwelijk"
        | "vertrouwelijk"
        | "confidentieel"
        | "geheim"
        | "zeer_geheim";
      /** De datum waarop het is ontstaan. */
      beginGeldigheid: string;
      /** De datum waarop het is opgeheven. */
      eindeGeldigheid?: string | null;
      /** Geeft aan of het object een concept betreft. Concepten zijn niet-definitieve versies en zouden niet gebruikt moeten worden buiten deze API. */
      concept?: boolean;
    };
    /** Specificatie voor het bepalen van de brondatum voor de start van de Archiefactietermijn (=brondatum) van het zaakdossier. */
    BrondatumArchiefprocedure: {
      /**
       * Wijze van bepalen van de brondatum.
       *
       * Uitleg bij mogelijke waarden:
       *
       * * `afgehandeld` - (Afgehandeld) De termijn start op de datum waarop de zaak is afgehandeld (ZAAK.Einddatum in het RGBZ).
       * * `ander_datumkenmerk` - (Ander datumkenmerk) De termijn start op de datum die is vastgelegd in een ander datumveld dan de datumvelden waarop de overige waarden (van deze attribuutsoort) betrekking hebben. `Objecttype`, `Registratie` en `Datumkenmerk` zijn niet leeg.
       * * `eigenschap` - (Eigenschap) De termijn start op de datum die vermeld is in een zaaktype-specifieke eigenschap (zijnde een `datumveld`). `ResultaatType.ZaakType` heeft een `Eigenschap`; `Objecttype`, en `Datumkenmerk` zijn niet leeg.
       * * `gerelateerde_zaak` - (Gerelateerde zaak) De termijn start op de datum waarop de gerelateerde zaak is afgehandeld (`ZAAK.Einddatum` of `ZAAK.Gerelateerde_zaak.Einddatum` in het RGBZ). `ResultaatType.ZaakType` heeft gerelateerd `ZaakType`
       * * `hoofdzaak` - (Hoofdzaak) De termijn start op de datum waarop de gerelateerde zaak is afgehandeld, waarvan de zaak een deelzaak is (`ZAAK.Einddatum` van de hoofdzaak in het RGBZ). ResultaatType.ZaakType is deelzaaktype van ZaakType.
       * * `ingangsdatum_besluit` - (Ingangsdatum besluit) De termijn start op de datum waarop het besluit van kracht wordt (`BESLUIT.Ingangsdatum` in het RGBZ).	ResultaatType.ZaakType heeft relevant BesluitType
       * * `termijn` - (Termijn) De termijn start een vast aantal jaren na de datum waarop de zaak is afgehandeld (`ZAAK.Einddatum` in het RGBZ).
       * * `vervaldatum_besluit` - (Vervaldatum besluit) De termijn start op de dag na de datum waarop het besluit vervalt (`BESLUIT.Vervaldatum` in het RGBZ). ResultaatType.ZaakType heeft relevant BesluitType
       * * `zaakobject` - (Zaakobject) De termijn start op de einddatum geldigheid van het zaakobject waarop de zaak betrekking heeft (bijvoorbeeld de overlijdendatum van een Persoon). M.b.v. de attribuutsoort `Objecttype` wordt vastgelegd om welke zaakobjecttype het gaat; m.b.v. de attribuutsoort `Datumkenmerk` wordt vastgelegd welke datum-attribuutsoort van het zaakobjecttype het betreft.
       */
      afleidingswijze:
        | "afgehandeld"
        | "ander_datumkenmerk"
        | "eigenschap"
        | "gerelateerde_zaak"
        | "hoofdzaak"
        | "ingangsdatum_besluit"
        | "termijn"
        | "vervaldatum_besluit"
        | "zaakobject";
      /** Naam van de attribuutsoort van het procesobject dat bepalend is voor het einde van de procestermijn. */
      datumkenmerk?: string;
      /** Indicatie dat de einddatum van het procesobject gedurende de uitvoering van de zaak bekend moet worden. Indien deze nog niet bekend is en deze waarde staat op `true`, dan kan de zaak (nog) niet afgesloten worden. */
      einddatumBekend?: boolean;
      /**
       * Het soort object in de registratie dat het procesobject representeert.
       *
       * Uitleg bij mogelijke waarden:
       *
       * * `adres` - Adres
       * * `besluit` - Besluit
       * * `buurt` - Buurt
       * * `enkelvoudig_document` - Enkelvoudig document
       * * `gemeente` - Gemeente
       * * `gemeentelijke_openbare_ruimte` - Gemeentelijke openbare ruimte
       * * `huishouden` - Huishouden
       * * `inrichtingselement` - Inrichtingselement
       * * `kadastrale_onroerende_zaak` - Kadastrale onroerende zaak
       * * `kunstwerkdeel` - Kunstwerkdeel
       * * `maatschappelijke_activiteit` - Maatschappelijke activiteit
       * * `medewerker` - Medewerker
       * * `natuurlijk_persoon` - Natuurlijk persoon
       * * `niet_natuurlijk_persoon` - Niet-natuurlijk persoon
       * * `openbare_ruimte` - Openbare ruimte
       * * `organisatorische_eenheid` - Organisatorische eenheid
       * * `pand` - Pand
       * * `spoorbaandeel` - Spoorbaandeel
       * * `status` - Status
       * * `terreindeel` - Terreindeel
       * * `terrein_gebouwd_object` - Terrein gebouwd object
       * * `vestiging` - Vestiging
       * * `waterdeel` - Waterdeel
       * * `wegdeel` - Wegdeel
       * * `wijk` - Wijk
       * * `woonplaats` - Woonplaats
       * * `woz_deelobject` - Woz deel object
       * * `woz_object` - Woz object
       * * `woz_waarde` - Woz waarde
       * * `zakelijk_recht` - Zakelijk recht
       * * `overige` - Overige
       */
      objecttype?:
        | "adres"
        | "besluit"
        | "buurt"
        | "enkelvoudig_document"
        | "gemeente"
        | "gemeentelijke_openbare_ruimte"
        | "huishouden"
        | "inrichtingselement"
        | "kadastrale_onroerende_zaak"
        | "kunstwerkdeel"
        | "maatschappelijke_activiteit"
        | "medewerker"
        | "natuurlijk_persoon"
        | "niet_natuurlijk_persoon"
        | "openbare_ruimte"
        | "organisatorische_eenheid"
        | "pand"
        | "spoorbaandeel"
        | "status"
        | "terreindeel"
        | "terrein_gebouwd_object"
        | "vestiging"
        | "waterdeel"
        | "wegdeel"
        | "wijk"
        | "woonplaats"
        | "woz_deelobject"
        | "woz_object"
        | "woz_waarde"
        | "zakelijk_recht"
        | "overige";
      /** De naam van de registratie waarvan het procesobject deel uit maakt. */
      registratie?: string;
      /** De periode dat het zaakdossier na afronding van de zaak actief gebruikt en/of geraadpleegd wordt ter ondersteuning van de taakuitoefening van de organisatie. Enkel relevant indien de afleidingswijze 'termijn' is. */
      procestermijn?: string | null;
    } | null;
    ResultaatType: {
      /** URL-referentie naar dit object. Dit is de unieke identificatie en locatie van dit object. */
      url?: string;
      /** URL-referentie naar het ZAAKTYPE van ZAAKen waarin resultaten van dit RESULTAATTYPE bereikt kunnen worden. */
      zaaktype: string;
      /** Omschrijving van de aard van resultaten van het RESULTAATTYPE. */
      omschrijving: string;
      /** Algemeen gehanteerde omschrijving van de aard van resultaten van het RESULTAATTYPE. Dit moet een URL-referentie zijn naar de referenlijst van generieke resultaattypeomschrijvingen. Im ImZTC heet dit 'omschrijving generiek' */
      resultaattypeomschrijving: string;
      /** Waarde van de omschrijving-generiek referentie (attribuut `omschrijving`) */
      omschrijvingGeneriek?: string;
      /** URL-referentie naar de, voor het archiefregime bij het RESULTAATTYPE relevante, categorie in de Selectielijst Archiefbescheiden (RESULTAAT in de Selectielijst API) van de voor het ZAAKTYPE verantwoordelijke overheidsorganisatie. */
      selectielijstklasse: string;
      /** Een toelichting op dit RESULTAATTYPE en het belang hiervan voor ZAAKen waarin een resultaat van dit RESULTAATTYPE wordt geselecteerd. */
      toelichting?: string;
      /**
       * Aanduiding die aangeeft of ZAAKen met een resultaat van dit RESULTAATTYPE blijvend moeten worden bewaard of (op termijn) moeten worden vernietigd. Indien niet expliciet opgegeven wordt dit gevuld vanuit de selectielijst.
       *
       * Uitleg bij mogelijke waarden:
       *
       * * `blijvend_bewaren` - Het zaakdossier moet bewaard blijven en op de Archiefactiedatum overgedragen worden naar een archiefbewaarplaats.
       * * `vernietigen` - Het zaakdossier moet op of na de Archiefactiedatum vernietigd worden.
       */
      archiefnominatie?: "blijvend_bewaren" | "vernietigen";
      /** De termijn, na het vervallen van het bedrjfsvoeringsbelang, waarna het zaakdossier (de ZAAK met alle bijbehorende INFORMATIEOBJECTen) van een ZAAK met een resultaat van dit RESULTAATTYPE vernietigd of overgebracht (naar een archiefbewaarplaats) moet worden. Voor te vernietigen dossiers betreft het de in die Selectielijst genoemde bewaartermjn. Voor blijvend te bewaren zaakdossiers betreft het de termijn vanaf afronding van de zaak tot overbrenging (de procestermijn is dan nihil). */
      archiefactietermijn?: string | null;
      brondatumArchiefprocedure?: components["schemas"]["BrondatumArchiefprocedure"];
    };
    RolType: {
      /** URL-referentie naar dit object. Dit is de unieke identificatie en locatie van dit object. */
      url?: string;
      /** URL-referentie naar het ZAAKTYPE waar deze ROLTYPEn betrokken kunnen zijn. */
      zaaktype: string;
      /** Omschrijving van de aard van de ROL. */
      omschrijving: string;
      /**
       * Algemeen gehanteerde omschrijving van de aard van de ROL.
       *
       * Uitleg bij mogelijke waarden:
       *
       * * `adviseur` - (Adviseur) Kennis in dienst stellen van de behandeling van (een deel van) een zaak.
       * * `behandelaar` - (Behandelaar) De vakinhoudelijke behandeling doen van (een deel van) een zaak.
       * * `belanghebbende` - (Belanghebbende) Vanuit eigen en objectief belang rechtstreeks betrokken zijn bij de behandeling en/of de uitkomst van een zaak.
       * * `beslisser` - (Beslisser) Nemen van besluiten die voor de uitkomst van een zaak noodzakelijk zijn.
       * * `initiator` - (Initiator) Aanleiding geven tot de start van een zaak ..
       * * `klantcontacter` - (Klantcontacter) Het eerste aanspreekpunt zijn voor vragen van burgers en bedrijven ..
       * * `zaakcoordinator` - (Zaakcoördinator) Er voor zorg dragen dat de behandeling van de zaak in samenhang uitgevoerd wordt conform de daarover gemaakte afspraken.
       * * `mede_initiator` - Mede-initiator
       */
      omschrijvingGeneriek:
        | "adviseur"
        | "behandelaar"
        | "belanghebbende"
        | "beslisser"
        | "initiator"
        | "klantcontacter"
        | "zaakcoordinator"
        | "mede_initiator";
    };
    StatusType: {
      /** URL-referentie naar dit object. Dit is de unieke identificatie en locatie van dit object. */
      url?: string;
      /** Een korte, voor de initiator van de zaak relevante, omschrijving van de aard van de STATUS van zaken van een ZAAKTYPE. */
      omschrijving: string;
      /** Algemeen gehanteerde omschrijving van de aard van STATUSsen van het STATUSTYPE */
      omschrijvingGeneriek?: string;
      /** De tekst die wordt gebruikt om de Initiator te informeren over het bereiken van een STATUS van dit STATUSTYPE bij het desbetreffende ZAAKTYPE. */
      statustekst?: string;
      /** URL-referentie naar het ZAAKTYPE van ZAAKen waarin STATUSsen van dit STATUSTYPE bereikt kunnen worden. */
      zaaktype: string;
      /** Een volgnummer voor statussen van het STATUSTYPE binnen een zaak. */
      volgnummer: number;
      /** Geeft aan dat dit STATUSTYPE een eindstatus betreft. Dit gegeven is afgeleid uit alle STATUSTYPEn van dit ZAAKTYPE met het hoogste volgnummer. */
      isEindstatus?: boolean;
      /** Aanduiding die aangeeft of na het zetten van een STATUS van dit STATUSTYPE de Initiator moet worden geïnformeerd over de statusovergang. */
      informeren?: boolean;
    };
    ZaakTypeInformatieObjectType: {
      /** URL-referentie naar dit object. Dit is de unieke identificatie en locatie van dit object. */
      url?: string;
      /** URL-referentie naar het ZAAKTYPE. */
      zaaktype: string;
      /** URL-referentie naar het INFORMATIEOBJECTTYPE. */
      informatieobjecttype: string;
      /** Uniek volgnummer van het ZAAK-INFORMATIEOBJECTTYPE binnen het ZAAKTYPE. */
      volgnummer: number;
      /**
       * Aanduiding van de richting van informatieobjecten van het gerelateerde INFORMATIEOBJECTTYPE bij zaken van het gerelateerde ZAAKTYPE.
       *
       * Uitleg bij mogelijke waarden:
       *
       * * `inkomend` - Inkomend
       * * `intern` - Intern
       * * `uitgaand` - Uitgaand
       */
      richting: "inkomend" | "intern" | "uitgaand";
      /** URL-referentie naar het STATUSTYPE waarbij deze INFORMATIEOBJECTTYPEn verplicht aanwezig moeten zijn. */
      statustype?: string | null;
    };
    /** Het Referentieproces dat ten grondslag ligt aan dit ZAAKTYPE. */
    ReferentieProces: {
      /** De naam van het Referentieproces. */
      naam: string;
      /** De URL naar de beschrijving van het Referentieproces */
      link?: string;
    };
    /** De ZAAKTYPEn van zaken die relevant zijn voor zaken van dit ZAAKTYPE. */
    ZaakTypenRelatie: {
      /** URL referentie naar het gerelateerde zaaktype, mogelijks in een extern ZTC. */
      zaaktype: string;
      /**
       * Omschrijving van de aard van de relatie van zaken van het ZAAKTYPE tot zaken van het andere ZAAKTYPE
       *
       * Uitleg bij mogelijke waarden:
       *
       * * `vervolg` - Vervolg
       * * `bijdrage` - Bijdrage
       * * `onderwerp` - Onderwerp
       */
      aardRelatie: "vervolg" | "bijdrage" | "onderwerp";
      /** Een toelichting op de aard van de relatie tussen beide ZAAKTYPEN. */
      toelichting?: string;
    };
    ZaakType: {
      /** URL-referentie naar dit object. Dit is de unieke identificatie en locatie van dit object. */
      url?: string;
      /** Unieke identificatie van het ZAAKTYPE binnen de CATALOGUS waarin het ZAAKTYPE voorkomt. */
      identificatie?: string;
      /** Omschrijving van de aard van ZAAKen van het ZAAKTYPE. */
      omschrijving: string;
      /** Algemeen gehanteerde omschrijving van de aard van ZAAKen van het ZAAKTYPE */
      omschrijvingGeneriek?: string;
      /**
       * Aanduiding van de mate waarin zaakdossiers van ZAAKen van dit ZAAKTYPE voor de openbaarheid bestemd zijn. Indien de zaak bij het aanmaken geen vertrouwelijkheidaanduiding krijgt, dan wordt deze waarde gezet.
       *
       * Uitleg bij mogelijke waarden:
       *
       * * `openbaar` - Openbaar
       * * `beperkt_openbaar` - Beperkt openbaar
       * * `intern` - Intern
       * * `zaakvertrouwelijk` - Zaakvertrouwelijk
       * * `vertrouwelijk` - Vertrouwelijk
       * * `confidentieel` - Confidentieel
       * * `geheim` - Geheim
       * * `zeer_geheim` - Zeer geheim
       */
      vertrouwelijkheidaanduiding:
        | "openbaar"
        | "beperkt_openbaar"
        | "intern"
        | "zaakvertrouwelijk"
        | "vertrouwelijk"
        | "confidentieel"
        | "geheim"
        | "zeer_geheim";
      /** Een omschrijving van hetgeen beoogd is te bereiken met een zaak van dit zaaktype. */
      doel: string;
      /** Een omschrijving van de gebeurtenis die leidt tot het starten van een ZAAK van dit ZAAKTYPE. */
      aanleiding: string;
      /** Een eventuele toelichting op dit zaaktype, zoals een beschrijving van het procesverloop op de hoofdlijnen. */
      toelichting?: string;
      /**
       * Een aanduiding waarmee onderscheid wordt gemaakt tussen ZAAKTYPEn die Intern respectievelijk Extern geïnitieerd worden. Indien van beide sprake kan zijn, dan prevaleert de externe initiatie.
       *
       * Uitleg bij mogelijke waarden:
       *
       * * `inkomend` - Inkomend
       * * `intern` - Intern
       * * `uitgaand` - Uitgaand
       */
      indicatieInternOfExtern: "intern" | "extern";
      /** Werkwoord dat hoort bij de handeling die de initiator verricht bij dit zaaktype. Meestal 'aanvragen', 'indienen' of 'melden'. Zie ook het IOB model op https://www.gemmaonline.nl/index.php/Imztc_2.1/doc/attribuutsoort/zaaktype.handeling_initiator */
      handelingInitiator: string;
      /** Het onderwerp van ZAAKen van dit ZAAKTYPE. In veel gevallen nauw gerelateerd aan de product- of dienstnaam uit de Producten- en Dienstencatalogus (PDC). Bijvoorbeeld: 'Evenementenvergunning', 'Geboorte', 'Klacht'. Zie ook het IOB model op https://www.gemmaonline.nl/index.php/Imztc_2.1/doc/attribuutsoort/zaaktype.onderwerp */
      onderwerp: string;
      /** Werkwoord dat hoort bij de handeling die de behandelaar verricht bij het afdoen van ZAAKen van dit ZAAKTYPE. Meestal 'behandelen', 'uitvoeren', 'vaststellen' of 'onderhouden'. Zie ook het IOB model op https://www.gemmaonline.nl/index.php/Imztc_2.1/doc/attribuutsoort/zaaktype.handeling_behandelaar */
      handelingBehandelaar: string;
      /** De periode waarbinnen volgens wet- en regelgeving een ZAAK van het ZAAKTYPE afgerond dient te zijn, in kalenderdagen. */
      doorlooptijd: string;
      /** De periode waarbinnen verwacht wordt dat een ZAAK van het ZAAKTYPE afgerond wordt conform de geldende servicenormen van de zaakbehandelende organisatie(s). */
      servicenorm?: string | null;
      /** Aanduiding die aangeeft of ZAAKen van dit mogelijk ZAAKTYPE kunnen worden opgeschort en/of aangehouden. */
      opschortingEnAanhoudingMogelijk: boolean;
      /** Aanduiding die aangeeft of de Doorlooptijd behandeling van ZAAKen van dit ZAAKTYPE kan worden verlengd. */
      verlengingMogelijk: boolean;
      /** Een tijdsduur in ISO 8601 formaat waarmee de Doorlooptijd behandeling van ZAAKen van dit ZAAKTYPE kan worden verlengd. Mag alleen een waarde bevatten als verlenging mogelijk is. */
      verlengingstermijn?: string | null;
      /** Een trefwoord waarmee ZAAKen van het ZAAKTYPE kunnen worden gekarakteriseerd. */
      trefwoorden?: string[];
      /** Aanduiding of (het starten van) een ZAAK dit ZAAKTYPE gepubliceerd moet worden. */
      publicatieIndicatie: boolean;
      /** De generieke tekst van de publicatie van ZAAKen van dit ZAAKTYPE. */
      publicatietekst?: string;
      /** De relatie tussen ZAAKen van dit ZAAKTYPE en de beleidsmatige en/of financiële verantwoording. */
      verantwoordingsrelatie?: string[];
      /** Het product of de dienst die door ZAAKen van dit ZAAKTYPE wordt voortgebracht. */
      productenOfDiensten: string[];
      /** URL-referentie naar een vanuit archiveringsoptiek onderkende groep processen met dezelfde kenmerken (PROCESTYPE in de Selectielijst API). */
      selectielijstProcestype?: string;
      referentieproces: components["schemas"]["ReferentieProces"];
      /** URL-referentie naar de CATALOGUS waartoe dit ZAAKTYPE behoort. */
      catalogus: string;
      /** URL-referenties naar de STATUSTYPEN die mogelijk zijn binnen dit ZAAKTYPE. */
      statustypen?: string[];
      /** URL-referenties naar de RESULTAATTYPEN die mogelijk zijn binnen dit ZAAKTYPE. */
      resultaattypen?: string[];
      /** URL-referenties naar de EIGENSCHAPPEN die aanwezig moeten zijn in ZAKEN van dit ZAAKTYPE. */
      eigenschappen?: string[];
      /** URL-referenties naar de INFORMATIEOBJECTTYPEN die mogelijk zijn binnen dit ZAAKTYPE. */
      informatieobjecttypen?: string[];
      /** URL-referenties naar de ROLTYPEN die mogelijk zijn binnen dit ZAAKTYPE. */
      roltypen?: string[];
      /** URL-referenties naar de BESLUITTYPEN die mogelijk zijn binnen dit ZAAKTYPE. */
      besluittypen: string[];
      /** De ZAAKTYPE(n) waaronder ZAAKen als deelzaak kunnen voorkomen bij ZAAKen van dit ZAAKTYPE. */
      deelzaaktypen?: (string | null)[];
      /** De ZAAKTYPEn van zaken die relevant zijn voor zaken van dit ZAAKTYPE. */
      gerelateerdeZaaktypen: components["schemas"]["ZaakTypenRelatie"][];
      /** De datum waarop het is ontstaan. */
      beginGeldigheid: string;
      /** De datum waarop het is opgeheven. */
      eindeGeldigheid?: string | null;
      /** De datum waarop de (gewijzigde) kenmerken van het ZAAKTYPE geldig zijn geworden */
      versiedatum: string;
      /** Geeft aan of het object een concept betreft. Concepten zijn niet-definitieve versies en zouden niet gebruikt moeten worden buiten deze API. */
      concept?: boolean;
    };
  };
  responses: {
    /** Bad request */
    400: {
      headers: {
        /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
        "API-version"?: string;
      };
      content: {
        "application/problem+json": components["schemas"]["ValidatieFout"];
      };
    };
    /** Unauthorized */
    401: {
      headers: {
        /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
        "API-version"?: string;
      };
      content: {
        "application/problem+json": components["schemas"]["Fout"];
      };
    };
    /** Forbidden */
    403: {
      headers: {
        /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
        "API-version"?: string;
      };
      content: {
        "application/problem+json": components["schemas"]["Fout"];
      };
    };
    /** Not found */
    404: {
      headers: {
        /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
        "API-version"?: string;
      };
      content: {
        "application/problem+json": components["schemas"]["Fout"];
      };
    };
    /** Not acceptable */
    406: {
      headers: {
        /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
        "API-version"?: string;
      };
      content: {
        "application/problem+json": components["schemas"]["Fout"];
      };
    };
    /** Conflict */
    409: {
      headers: {
        /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
        "API-version"?: string;
      };
      content: {
        "application/problem+json": components["schemas"]["Fout"];
      };
    };
    /** Gone */
    410: {
      headers: {
        /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
        "API-version"?: string;
      };
      content: {
        "application/problem+json": components["schemas"]["Fout"];
      };
    };
    /** Precondition failed */
    412: {
      headers: {
        /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
        "API-version"?: string;
      };
      content: {
        "application/problem+json": components["schemas"]["Fout"];
      };
    };
    /** Unsupported media type */
    415: {
      headers: {
        /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
        "API-version"?: string;
      };
      content: {
        "application/problem+json": components["schemas"]["Fout"];
      };
    };
    /** Too many requests */
    429: {
      headers: {
        /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
        "API-version"?: string;
      };
      content: {
        "application/problem+json": components["schemas"]["Fout"];
      };
    };
    /** Internal server error */
    500: {
      headers: {
        /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
        "API-version"?: string;
      };
      content: {
        "application/problem+json": components["schemas"]["Fout"];
      };
    };
  };
  requestBodies: {
    Eigenschap: {
      content: {
        "application/json": components["schemas"]["Eigenschap"];
      };
    };
    ZaakType: {
      content: {
        "application/json": components["schemas"]["ZaakType"];
      };
    };
    RolType: {
      content: {
        "application/json": components["schemas"]["RolType"];
      };
    };
    StatusType: {
      content: {
        "application/json": components["schemas"]["StatusType"];
      };
    };
    BesluitType: {
      content: {
        "application/json": components["schemas"]["BesluitType"];
      };
    };
    InformatieObjectType: {
      content: {
        "application/json": components["schemas"]["InformatieObjectType"];
      };
    };
    ResultaatType: {
      content: {
        "application/json": components["schemas"]["ResultaatType"];
      };
    };
    ZaakTypeInformatieObjectType: {
      content: {
        "application/json": components["schemas"]["ZaakTypeInformatieObjectType"];
      };
    };
  };
}

export interface operations {
  /** Deze lijst kan gefilterd wordt met query-string parameters. */
  besluittype_list: {
    parameters: {
      query: {
        /** URL-referentie naar de CATALOGUS waartoe dit BESLUITTYPE behoort. */
        catalogus?: string;
        /** ZAAKTYPE met ZAAKen die relevant kunnen zijn voor dit BESLUITTYPE */
        zaaktypen?: string;
        /** Het INFORMATIEOBJECTTYPE van informatieobjecten waarin besluiten van dit BESLUITTYPE worden vastgelegd. */
        informatieobjecttypen?: string;
        /**
         * filter objects depending on their concept status:
         * * `alles`: Toon objecten waarvan het attribuut `concept` true of false is.
         * * `concept`: Toon objecten waarvan het attribuut `concept` true is.
         * * `definitief`: Toon objecten waarvan het attribuut `concept` false is (standaard).
         */
        status?: string;
        /** Een pagina binnen de gepagineerde set resultaten. */
        page?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        headers: {
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
        };
        content: {
          "application/json": {
            count: number;
            next?: string | null;
            previous?: string | null;
            results: components["schemas"]["BesluitType"][];
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
  };
  /** Maak een BESLUITTYPE aan. */
  besluittype_create: {
    parameters: {
      header: {
        /** Content type van de verzoekinhoud. */
        "Content-Type": "application/json";
      };
    };
    responses: {
      /** Created */
      201: {
        headers: {
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
          /** URL waar de resource leeft. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["BesluitType"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
    requestBody: components["requestBodies"]["BesluitType"];
  };
  /** Een specifieke BESLUITTYPE opvragen. */
  besluittype_read: {
    parameters: {
      header: {
        /** Voer een voorwaardelijk verzoek uit. Deze header moet één of meerdere ETag-waardes bevatten van resources die de consumer gecached heeft. Indien de waarde van de ETag van de huidige resource voorkomt in deze set, dan antwoordt de provider met een lege HTTP 304 request. Zie [MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match) voor meer informatie. */
        "If-None-Match"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        headers: {
          /** De ETag berekend op de response body JSON. Indien twee resources exact dezelfde ETag hebben, dan zijn deze resources identiek aan elkaar. Je kan de ETag gebruiken om caching te implementeren. */
          ETag?: string;
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
        };
        content: {
          "application/json": components["schemas"]["BesluitType"];
        };
      };
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
  };
  /**
   * Werk een BESLUITTYPE in zijn geheel bij. Dit kan alleen als het een concept
   * betreft.
   */
  besluittype_update: {
    parameters: {
      header: {
        /** Content type van de verzoekinhoud. */
        "Content-Type": "application/json";
      };
    };
    responses: {
      /** OK */
      200: {
        headers: {
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
        };
        content: {
          "application/json": components["schemas"]["BesluitType"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
    requestBody: components["requestBodies"]["BesluitType"];
  };
  /** Verwijder een BESLUITTYPE. Dit kan alleen als het een concept betreft. */
  besluittype_delete: {
    responses: {
      /** No content */
      204: never;
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
  };
  /** Vraag de headers op die je bij een GET request zou krijgen. */
  besluittype_headers: {
    parameters: {
      header: {
        /** Voer een voorwaardelijk verzoek uit. Deze header moet één of meerdere ETag-waardes bevatten van resources die de consumer gecached heeft. Indien de waarde van de ETag van de huidige resource voorkomt in deze set, dan antwoordt de provider met een lege HTTP 304 request. Zie [MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match) voor meer informatie. */
        "If-None-Match"?: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  /** Werk een BESLUITTYPE deels bij. Dit kan alleen als het een concept betreft. */
  besluittype_partial_update: {
    parameters: {
      header: {
        /** Content type van de verzoekinhoud. */
        "Content-Type": "application/json";
      };
    };
    responses: {
      /** OK */
      200: {
        headers: {
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
        };
        content: {
          "application/json": components["schemas"]["BesluitType"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
    requestBody: components["requestBodies"]["BesluitType"];
  };
  /**
   * Alle BESLUITTYPEn van de besluiten die het resultaat kunnen zijn van het
   * zaakgericht werken van de behandelende organisatie(s).
   */
  besluittype_publish: {
    parameters: {
      header: {
        /** Content type van de verzoekinhoud. */
        "Content-Type": "application/json";
      };
    };
    responses: {
      /** Created */
      201: {
        headers: {
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
          /** URL waar de resource leeft. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["BesluitType"];
        };
      };
    };
  };
  /** Deze lijst kan gefilterd wordt met query-string parameters. */
  catalogus_list: {
    parameters: {
      query: {
        /** Een afkorting waarmee wordt aangegeven voor welk domein in een CATALOGUS ZAAKTYPEn zijn uitgewerkt. */
        domein?: string;
        /** Multiple values may be separated by commas. */
        domein__in?: string;
        /** Het door een kamer toegekend uniek nummer voor de INGESCHREVEN NIET-NATUURLIJK PERSOON die de eigenaar is van een CATALOGUS. */
        rsin?: string;
        /** Multiple values may be separated by commas. */
        rsin__in?: string;
        /** Een pagina binnen de gepagineerde set resultaten. */
        page?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        headers: {
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
        };
        content: {
          "application/json": {
            count: number;
            next?: string | null;
            previous?: string | null;
            results: components["schemas"]["Catalogus"][];
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
  };
  /** Maak een CATALOGUS aan. */
  catalogus_create: {
    parameters: {
      header: {
        /** Content type van de verzoekinhoud. */
        "Content-Type": "application/json";
      };
    };
    responses: {
      /** Created */
      201: {
        headers: {
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
          /** URL waar de resource leeft. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["Catalogus"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Catalogus"];
      };
    };
  };
  /** Een specifieke CATALOGUS opvragen. */
  catalogus_read: {
    parameters: {
      header: {
        /** Voer een voorwaardelijk verzoek uit. Deze header moet één of meerdere ETag-waardes bevatten van resources die de consumer gecached heeft. Indien de waarde van de ETag van de huidige resource voorkomt in deze set, dan antwoordt de provider met een lege HTTP 304 request. Zie [MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match) voor meer informatie. */
        "If-None-Match"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        headers: {
          /** De ETag berekend op de response body JSON. Indien twee resources exact dezelfde ETag hebben, dan zijn deze resources identiek aan elkaar. Je kan de ETag gebruiken om caching te implementeren. */
          ETag?: string;
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
        };
        content: {
          "application/json": components["schemas"]["Catalogus"];
        };
      };
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
  };
  /** Vraag de headers op die je bij een GET request zou krijgen. */
  catalogus_headers: {
    parameters: {
      header: {
        /** Voer een voorwaardelijk verzoek uit. Deze header moet één of meerdere ETag-waardes bevatten van resources die de consumer gecached heeft. Indien de waarde van de ETag van de huidige resource voorkomt in deze set, dan antwoordt de provider met een lege HTTP 304 request. Zie [MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match) voor meer informatie. */
        "If-None-Match"?: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  /** Deze lijst kan gefilterd wordt met query-string parameters. */
  eigenschap_list: {
    parameters: {
      query: {
        /** URL-referentie naar het ZAAKTYPE van de ZAAKen waarvoor deze EIGENSCHAP van belang is. */
        zaaktype?: string;
        /**
         * filter objects depending on their concept status:
         * * `alles`: Toon objecten waarvan het attribuut `concept` true of false is.
         * * `concept`: Toon objecten waarvan het attribuut `concept` true is.
         * * `definitief`: Toon objecten waarvan het attribuut `concept` false is (standaard).
         */
        status?: string;
        /** Een pagina binnen de gepagineerde set resultaten. */
        page?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        headers: {
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
        };
        content: {
          "application/json": {
            count: number;
            next?: string | null;
            previous?: string | null;
            results: components["schemas"]["Eigenschap"][];
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
  };
  /**
   * Maak een EIGENSCHAP aan. Dit kan alleen als het bijbehorende ZAAKTYPE een
   * concept betreft.
   */
  eigenschap_create: {
    parameters: {
      header: {
        /** Content type van de verzoekinhoud. */
        "Content-Type": "application/json";
      };
    };
    responses: {
      /** Created */
      201: {
        headers: {
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
          /** URL waar de resource leeft. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["Eigenschap"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
    requestBody: components["requestBodies"]["Eigenschap"];
  };
  /** Een specifieke EIGENSCHAP opvragen. */
  eigenschap_read: {
    parameters: {
      header: {
        /** Voer een voorwaardelijk verzoek uit. Deze header moet één of meerdere ETag-waardes bevatten van resources die de consumer gecached heeft. Indien de waarde van de ETag van de huidige resource voorkomt in deze set, dan antwoordt de provider met een lege HTTP 304 request. Zie [MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match) voor meer informatie. */
        "If-None-Match"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        headers: {
          /** De ETag berekend op de response body JSON. Indien twee resources exact dezelfde ETag hebben, dan zijn deze resources identiek aan elkaar. Je kan de ETag gebruiken om caching te implementeren. */
          ETag?: string;
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
        };
        content: {
          "application/json": components["schemas"]["Eigenschap"];
        };
      };
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
  };
  /**
   * Werk een EIGENSCHAP in zijn geheel bij. Dit kan alleen als het
   * bijbehorende ZAAKTYPE een concept betreft.
   */
  eigenschap_update: {
    parameters: {
      header: {
        /** Content type van de verzoekinhoud. */
        "Content-Type": "application/json";
      };
    };
    responses: {
      /** OK */
      200: {
        headers: {
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
        };
        content: {
          "application/json": components["schemas"]["Eigenschap"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
    requestBody: components["requestBodies"]["Eigenschap"];
  };
  /**
   * Verwijder een EIGENSCHAP. Dit kan alleen als het bijbehorende ZAAKTYPE een
   * concept betreft.
   */
  eigenschap_delete: {
    responses: {
      /** No content */
      204: never;
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
  };
  /** Vraag de headers op die je bij een GET request zou krijgen. */
  eigenschap_headers: {
    parameters: {
      header: {
        /** Voer een voorwaardelijk verzoek uit. Deze header moet één of meerdere ETag-waardes bevatten van resources die de consumer gecached heeft. Indien de waarde van de ETag van de huidige resource voorkomt in deze set, dan antwoordt de provider met een lege HTTP 304 request. Zie [MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match) voor meer informatie. */
        "If-None-Match"?: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  /**
   * Werk een EIGENSCHAP deels bij. Dit kan alleen als het bijbehorende
   * ZAAKTYPE een concept betreft.
   */
  eigenschap_partial_update: {
    parameters: {
      header: {
        /** Content type van de verzoekinhoud. */
        "Content-Type": "application/json";
      };
    };
    responses: {
      /** OK */
      200: {
        headers: {
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
        };
        content: {
          "application/json": components["schemas"]["Eigenschap"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
    requestBody: components["requestBodies"]["Eigenschap"];
  };
  /** Deze lijst kan gefilterd wordt met query-string parameters. */
  informatieobjecttype_list: {
    parameters: {
      query: {
        /** URL-referentie naar de CATALOGUS waartoe dit INFORMATIEOBJECTTYPE behoort. */
        catalogus?: string;
        /**
         * filter objects depending on their concept status:
         * * `alles`: Toon objecten waarvan het attribuut `concept` true of false is.
         * * `concept`: Toon objecten waarvan het attribuut `concept` true is.
         * * `definitief`: Toon objecten waarvan het attribuut `concept` false is (standaard).
         */
        status?: string;
        /** Een pagina binnen de gepagineerde set resultaten. */
        page?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        headers: {
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
        };
        content: {
          "application/json": {
            count: number;
            next?: string | null;
            previous?: string | null;
            results: components["schemas"]["InformatieObjectType"][];
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
  };
  /** Maak een INFORMATIEOBJECTTYPE aan. */
  informatieobjecttype_create: {
    parameters: {
      header: {
        /** Content type van de verzoekinhoud. */
        "Content-Type": "application/json";
      };
    };
    responses: {
      /** Created */
      201: {
        headers: {
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
          /** URL waar de resource leeft. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["InformatieObjectType"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
    requestBody: components["requestBodies"]["InformatieObjectType"];
  };
  /** Een specifieke INFORMATIEOBJECTTYPE opvragen. */
  informatieobjecttype_read: {
    parameters: {
      header: {
        /** Voer een voorwaardelijk verzoek uit. Deze header moet één of meerdere ETag-waardes bevatten van resources die de consumer gecached heeft. Indien de waarde van de ETag van de huidige resource voorkomt in deze set, dan antwoordt de provider met een lege HTTP 304 request. Zie [MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match) voor meer informatie. */
        "If-None-Match"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        headers: {
          /** De ETag berekend op de response body JSON. Indien twee resources exact dezelfde ETag hebben, dan zijn deze resources identiek aan elkaar. Je kan de ETag gebruiken om caching te implementeren. */
          ETag?: string;
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
        };
        content: {
          "application/json": components["schemas"]["InformatieObjectType"];
        };
      };
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
  };
  /**
   * Werk een INFORMATIEOBJECTTYPE in zijn geheel bij. Dit kan alleen als het een
   * concept betreft.
   */
  informatieobjecttype_update: {
    parameters: {
      header: {
        /** Content type van de verzoekinhoud. */
        "Content-Type": "application/json";
      };
    };
    responses: {
      /** OK */
      200: {
        headers: {
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
        };
        content: {
          "application/json": components["schemas"]["InformatieObjectType"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
    requestBody: components["requestBodies"]["InformatieObjectType"];
  };
  /**
   * Verwijder een INFORMATIEOBJECTTYPE. Dit kan alleen als het een concept
   * betreft.
   */
  informatieobjecttype_delete: {
    responses: {
      /** No content */
      204: never;
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
  };
  /** Vraag de headers op die je bij een GET request zou krijgen. */
  informatieobjecttype_headers: {
    parameters: {
      header: {
        /** Voer een voorwaardelijk verzoek uit. Deze header moet één of meerdere ETag-waardes bevatten van resources die de consumer gecached heeft. Indien de waarde van de ETag van de huidige resource voorkomt in deze set, dan antwoordt de provider met een lege HTTP 304 request. Zie [MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match) voor meer informatie. */
        "If-None-Match"?: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  /**
   * Werk een INFORMATIEOBJECTTYPE deels bij. Dit kan alleen als het een concept
   * betreft.
   */
  informatieobjecttype_partial_update: {
    parameters: {
      header: {
        /** Content type van de verzoekinhoud. */
        "Content-Type": "application/json";
      };
    };
    responses: {
      /** OK */
      200: {
        headers: {
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
        };
        content: {
          "application/json": components["schemas"]["InformatieObjectType"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
    requestBody: components["requestBodies"]["InformatieObjectType"];
  };
  /**
   * Een INFORMATIEOBJECTTYPE beschijft de karakteristieken van een document of
   * ander object dat informatie bevat.
   */
  informatieobjecttype_publish: {
    parameters: {
      header: {
        /** Content type van de verzoekinhoud. */
        "Content-Type": "application/json";
      };
    };
    responses: {
      /** Created */
      201: {
        headers: {
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
          /** URL waar de resource leeft. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["InformatieObjectType"];
        };
      };
    };
  };
  /** Deze lijst kan gefilterd wordt met query-string parameters. */
  resultaattype_list: {
    parameters: {
      query: {
        /** URL-referentie naar het ZAAKTYPE van ZAAKen waarin resultaten van dit RESULTAATTYPE bereikt kunnen worden. */
        zaaktype?: string;
        /**
         * filter objects depending on their concept status:
         * * `alles`: Toon objecten waarvan het attribuut `concept` true of false is.
         * * `concept`: Toon objecten waarvan het attribuut `concept` true is.
         * * `definitief`: Toon objecten waarvan het attribuut `concept` false is (standaard).
         */
        status?: string;
        /** Een pagina binnen de gepagineerde set resultaten. */
        page?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        headers: {
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
        };
        content: {
          "application/json": {
            count: number;
            next?: string | null;
            previous?: string | null;
            results: components["schemas"]["ResultaatType"][];
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
  };
  /**
   * Maak een RESULTAATTYPE aan. Dit kan alleen als het bijbehorende ZAAKTYPE een
   * concept betreft.
   */
  resultaattype_create: {
    parameters: {
      header: {
        /** Content type van de verzoekinhoud. */
        "Content-Type": "application/json";
      };
    };
    responses: {
      /** Created */
      201: {
        headers: {
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
          /** URL waar de resource leeft. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["ResultaatType"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
    requestBody: components["requestBodies"]["ResultaatType"];
  };
  /** Een specifieke RESULTAATTYPE opvragen. */
  resultaattype_read: {
    parameters: {
      header: {
        /** Voer een voorwaardelijk verzoek uit. Deze header moet één of meerdere ETag-waardes bevatten van resources die de consumer gecached heeft. Indien de waarde van de ETag van de huidige resource voorkomt in deze set, dan antwoordt de provider met een lege HTTP 304 request. Zie [MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match) voor meer informatie. */
        "If-None-Match"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        headers: {
          /** De ETag berekend op de response body JSON. Indien twee resources exact dezelfde ETag hebben, dan zijn deze resources identiek aan elkaar. Je kan de ETag gebruiken om caching te implementeren. */
          ETag?: string;
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
        };
        content: {
          "application/json": components["schemas"]["ResultaatType"];
        };
      };
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
  };
  /**
   * Werk een RESULTAATTYPE in zijn geheel bij. Dit kan alleen als het
   * bijbehorende ZAAKTYPE een concept betreft.
   */
  resultaattype_update: {
    parameters: {
      header: {
        /** Content type van de verzoekinhoud. */
        "Content-Type": "application/json";
      };
    };
    responses: {
      /** OK */
      200: {
        headers: {
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
        };
        content: {
          "application/json": components["schemas"]["ResultaatType"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
    requestBody: components["requestBodies"]["ResultaatType"];
  };
  /**
   * Verwijder een RESULTAATTYPE. Dit kan alleen als het bijbehorende ZAAKTYPE
   * een concept betreft.
   */
  resultaattype_delete: {
    responses: {
      /** No content */
      204: never;
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
  };
  /** Vraag de headers op die je bij een GET request zou krijgen. */
  resultaattype_headers: {
    parameters: {
      header: {
        /** Voer een voorwaardelijk verzoek uit. Deze header moet één of meerdere ETag-waardes bevatten van resources die de consumer gecached heeft. Indien de waarde van de ETag van de huidige resource voorkomt in deze set, dan antwoordt de provider met een lege HTTP 304 request. Zie [MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match) voor meer informatie. */
        "If-None-Match"?: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  /**
   * Werk een RESULTAATTYPE deels bij. Dit kan alleen als het bijbehorende
   * ZAAKTYPE een concept betreft.
   */
  resultaattype_partial_update: {
    parameters: {
      header: {
        /** Content type van de verzoekinhoud. */
        "Content-Type": "application/json";
      };
    };
    responses: {
      /** OK */
      200: {
        headers: {
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
        };
        content: {
          "application/json": components["schemas"]["ResultaatType"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
    requestBody: components["requestBodies"]["ResultaatType"];
  };
  /** Deze lijst kan gefilterd wordt met query-string parameters. */
  roltype_list: {
    parameters: {
      query: {
        /** URL-referentie naar het ZAAKTYPE waar deze ROLTYPEn betrokken kunnen zijn. */
        zaaktype?: string;
        /** Algemeen gehanteerde omschrijving van de aard van de ROL. */
        omschrijvingGeneriek?:
          | "adviseur"
          | "behandelaar"
          | "belanghebbende"
          | "beslisser"
          | "initiator"
          | "klantcontacter"
          | "zaakcoordinator"
          | "mede_initiator";
        /**
         * filter objects depending on their concept status:
         * * `alles`: Toon objecten waarvan het attribuut `concept` true of false is.
         * * `concept`: Toon objecten waarvan het attribuut `concept` true is.
         * * `definitief`: Toon objecten waarvan het attribuut `concept` false is (standaard).
         */
        status?: string;
        /** Een pagina binnen de gepagineerde set resultaten. */
        page?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        headers: {
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
        };
        content: {
          "application/json": {
            count: number;
            next?: string | null;
            previous?: string | null;
            results: components["schemas"]["RolType"][];
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
  };
  /**
   * Maak een ROLTYPE aan. Dit kan alleen als het bijbehorende ZAAKTYPE een
   * concept betreft.
   */
  roltype_create: {
    parameters: {
      header: {
        /** Content type van de verzoekinhoud. */
        "Content-Type": "application/json";
      };
    };
    responses: {
      /** Created */
      201: {
        headers: {
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
          /** URL waar de resource leeft. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["RolType"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
    requestBody: components["requestBodies"]["RolType"];
  };
  /** Een specifieke ROLTYPE opvragen. */
  roltype_read: {
    parameters: {
      header: {
        /** Voer een voorwaardelijk verzoek uit. Deze header moet één of meerdere ETag-waardes bevatten van resources die de consumer gecached heeft. Indien de waarde van de ETag van de huidige resource voorkomt in deze set, dan antwoordt de provider met een lege HTTP 304 request. Zie [MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match) voor meer informatie. */
        "If-None-Match"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        headers: {
          /** De ETag berekend op de response body JSON. Indien twee resources exact dezelfde ETag hebben, dan zijn deze resources identiek aan elkaar. Je kan de ETag gebruiken om caching te implementeren. */
          ETag?: string;
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
        };
        content: {
          "application/json": components["schemas"]["RolType"];
        };
      };
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
  };
  /**
   * Werk een ROLTYPE in zijn geheel bij. Dit kan alleen als het
   * bijbehorende ZAAKTYPE een concept betreft.
   */
  roltype_update: {
    parameters: {
      header: {
        /** Content type van de verzoekinhoud. */
        "Content-Type": "application/json";
      };
    };
    responses: {
      /** OK */
      200: {
        headers: {
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
        };
        content: {
          "application/json": components["schemas"]["RolType"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
    requestBody: components["requestBodies"]["RolType"];
  };
  /**
   * Verwijder een ROLTYPE. Dit kan alleen als het bijbehorende ZAAKTYPE een
   * concept betreft.
   */
  roltype_delete: {
    responses: {
      /** No content */
      204: never;
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
  };
  /** Vraag de headers op die je bij een GET request zou krijgen. */
  roltype_headers: {
    parameters: {
      header: {
        /** Voer een voorwaardelijk verzoek uit. Deze header moet één of meerdere ETag-waardes bevatten van resources die de consumer gecached heeft. Indien de waarde van de ETag van de huidige resource voorkomt in deze set, dan antwoordt de provider met een lege HTTP 304 request. Zie [MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match) voor meer informatie. */
        "If-None-Match"?: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  /**
   * Werk een ROLTYPE deels bij. Dit kan alleen als het bijbehorende
   * ZAAKTYPE een concept betreft.
   */
  roltype_partial_update: {
    parameters: {
      header: {
        /** Content type van de verzoekinhoud. */
        "Content-Type": "application/json";
      };
    };
    responses: {
      /** OK */
      200: {
        headers: {
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
        };
        content: {
          "application/json": components["schemas"]["RolType"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
    requestBody: components["requestBodies"]["RolType"];
  };
  /** Deze lijst kan gefilterd wordt met query-string parameters. */
  statustype_list: {
    parameters: {
      query: {
        /** URL-referentie naar het ZAAKTYPE van ZAAKen waarin STATUSsen van dit STATUSTYPE bereikt kunnen worden. */
        zaaktype?: string;
        /**
         * filter objects depending on their concept status:
         * * `alles`: Toon objecten waarvan het attribuut `concept` true of false is.
         * * `concept`: Toon objecten waarvan het attribuut `concept` true is.
         * * `definitief`: Toon objecten waarvan het attribuut `concept` false is (standaard).
         */
        status?: string;
        /** Een pagina binnen de gepagineerde set resultaten. */
        page?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        headers: {
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
        };
        content: {
          "application/json": {
            count: number;
            next?: string | null;
            previous?: string | null;
            results: components["schemas"]["StatusType"][];
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
  };
  /**
   * Maak een STATUSTYPE aan. Dit kan alleen als het bijbehorende ZAAKTYPE een
   * concept betreft.
   */
  statustype_create: {
    parameters: {
      header: {
        /** Content type van de verzoekinhoud. */
        "Content-Type": "application/json";
      };
    };
    responses: {
      /** Created */
      201: {
        headers: {
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
          /** URL waar de resource leeft. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["StatusType"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
    requestBody: components["requestBodies"]["StatusType"];
  };
  /** Een specifieke STATUSTYPE opvragen. */
  statustype_read: {
    parameters: {
      header: {
        /** Voer een voorwaardelijk verzoek uit. Deze header moet één of meerdere ETag-waardes bevatten van resources die de consumer gecached heeft. Indien de waarde van de ETag van de huidige resource voorkomt in deze set, dan antwoordt de provider met een lege HTTP 304 request. Zie [MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match) voor meer informatie. */
        "If-None-Match"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        headers: {
          /** De ETag berekend op de response body JSON. Indien twee resources exact dezelfde ETag hebben, dan zijn deze resources identiek aan elkaar. Je kan de ETag gebruiken om caching te implementeren. */
          ETag?: string;
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
        };
        content: {
          "application/json": components["schemas"]["StatusType"];
        };
      };
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
  };
  /**
   * Werk een STATUSTYPE in zijn geheel bij. Dit kan alleen als het
   * bijbehorende ZAAKTYPE een concept betreft.
   */
  statustype_update: {
    parameters: {
      header: {
        /** Content type van de verzoekinhoud. */
        "Content-Type": "application/json";
      };
    };
    responses: {
      /** OK */
      200: {
        headers: {
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
        };
        content: {
          "application/json": components["schemas"]["StatusType"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
    requestBody: components["requestBodies"]["StatusType"];
  };
  /**
   * Verwijder een STATUSTYPE. Dit kan alleen als het bijbehorende ZAAKTYPE een
   * concept betreft.
   */
  statustype_delete: {
    responses: {
      /** No content */
      204: never;
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
  };
  /** Vraag de headers op die je bij een GET request zou krijgen. */
  statustype_headers: {
    parameters: {
      header: {
        /** Voer een voorwaardelijk verzoek uit. Deze header moet één of meerdere ETag-waardes bevatten van resources die de consumer gecached heeft. Indien de waarde van de ETag van de huidige resource voorkomt in deze set, dan antwoordt de provider met een lege HTTP 304 request. Zie [MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match) voor meer informatie. */
        "If-None-Match"?: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  /**
   * Werk een STATUSTYPE deels bij. Dit kan alleen als het bijbehorende
   * ZAAKTYPE een concept betreft.
   */
  statustype_partial_update: {
    parameters: {
      header: {
        /** Content type van de verzoekinhoud. */
        "Content-Type": "application/json";
      };
    };
    responses: {
      /** OK */
      200: {
        headers: {
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
        };
        content: {
          "application/json": components["schemas"]["StatusType"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
    requestBody: components["requestBodies"]["StatusType"];
  };
  /** Deze lijst kan gefilterd wordt met query-string parameters. */
  zaakinformatieobjecttype_list: {
    parameters: {
      query: {
        /** URL-referentie naar het ZAAKTYPE. */
        zaaktype?: string;
        /** URL-referentie naar het INFORMATIEOBJECTTYPE. */
        informatieobjecttype?: string;
        /** Aanduiding van de richting van informatieobjecten van het gerelateerde INFORMATIEOBJECTTYPE bij zaken van het gerelateerde ZAAKTYPE. */
        richting?: "inkomend" | "intern" | "uitgaand";
        /**
         * filter objects depending on their concept status:
         * * `alles`: Toon objecten waarvan het attribuut `concept` true of false is.
         * * `concept`: Toon objecten waarvan het attribuut `concept` true is.
         * * `definitief`: Toon objecten waarvan het attribuut `concept` false is (standaard).
         */
        status?: string;
        /** Een pagina binnen de gepagineerde set resultaten. */
        page?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        headers: {
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
        };
        content: {
          "application/json": {
            count: number;
            next?: string | null;
            previous?: string | null;
            results: components["schemas"]["ZaakTypeInformatieObjectType"][];
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
  };
  /**
   * Maak een ZAAKTYPE-INFORMATIEOBJECTTYPE relatie aan. Dit kan alleen als het
   * bijbehorende ZAAKTYPE een concept betreft.
   *
   * Er wordt gevalideerd op:
   * - `zaaktype` en `informatieobjecttype` behoren tot dezelfde `catalogus`
   */
  zaakinformatieobjecttype_create: {
    parameters: {
      header: {
        /** Content type van de verzoekinhoud. */
        "Content-Type": "application/json";
      };
    };
    responses: {
      /** Created */
      201: {
        headers: {
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
          /** URL waar de resource leeft. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["ZaakTypeInformatieObjectType"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
    requestBody: components["requestBodies"]["ZaakTypeInformatieObjectType"];
  };
  /** Een specifieke ZAAKTYPE-INFORMATIEOBJECTTYPE relatie opvragen. */
  zaakinformatieobjecttype_read: {
    parameters: {
      header: {
        /** Voer een voorwaardelijk verzoek uit. Deze header moet één of meerdere ETag-waardes bevatten van resources die de consumer gecached heeft. Indien de waarde van de ETag van de huidige resource voorkomt in deze set, dan antwoordt de provider met een lege HTTP 304 request. Zie [MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match) voor meer informatie. */
        "If-None-Match"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        headers: {
          /** De ETag berekend op de response body JSON. Indien twee resources exact dezelfde ETag hebben, dan zijn deze resources identiek aan elkaar. Je kan de ETag gebruiken om caching te implementeren. */
          ETag?: string;
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
        };
        content: {
          "application/json": components["schemas"]["ZaakTypeInformatieObjectType"];
        };
      };
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
  };
  /**
   * Werk een ZAAKTYPE-INFORMATIEOBJECTTYPE relatie in zijn geheel bij. Dit kan
   * alleen als het bijbehorende ZAAKTYPE een concept betreft.
   *
   * Er wordt gevalideerd op:
   * - `zaaktype` en `informatieobjecttype` behoren tot dezelfde `catalogus`
   */
  zaakinformatieobjecttype_update: {
    parameters: {
      header: {
        /** Content type van de verzoekinhoud. */
        "Content-Type": "application/json";
      };
    };
    responses: {
      /** OK */
      200: {
        headers: {
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
        };
        content: {
          "application/json": components["schemas"]["ZaakTypeInformatieObjectType"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
    requestBody: components["requestBodies"]["ZaakTypeInformatieObjectType"];
  };
  /**
   * Verwijder een ZAAKTYPE-INFORMATIEOBJECTTYPE relatie. Dit kan alleen als
   * het bijbehorende ZAAKTYPE een concept betreft.
   *
   * Er wordt gevalideerd op:
   * - `zaaktype` of `informatieobjecttype` is nog niet gepubliceerd
   */
  zaakinformatieobjecttype_delete: {
    responses: {
      /** No content */
      204: never;
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
  };
  /** Vraag de headers op die je bij een GET request zou krijgen. */
  zaakinformatieobjecttype_headers: {
    parameters: {
      header: {
        /** Voer een voorwaardelijk verzoek uit. Deze header moet één of meerdere ETag-waardes bevatten van resources die de consumer gecached heeft. Indien de waarde van de ETag van de huidige resource voorkomt in deze set, dan antwoordt de provider met een lege HTTP 304 request. Zie [MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match) voor meer informatie. */
        "If-None-Match"?: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  /**
   * Werk een ZAAKTYPE-INFORMATIEOBJECTTYPE relatie deels bij. Dit kan alleen
   * als het bijbehorende ZAAKTYPE een concept betreft.
   *
   * Er wordt gevalideerd op:
   * - `zaaktype` en `informatieobjecttype` behoren tot dezelfde `catalogus`
   */
  zaakinformatieobjecttype_partial_update: {
    parameters: {
      header: {
        /** Content type van de verzoekinhoud. */
        "Content-Type": "application/json";
      };
    };
    responses: {
      /** OK */
      200: {
        headers: {
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
        };
        content: {
          "application/json": components["schemas"]["ZaakTypeInformatieObjectType"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
    requestBody: components["requestBodies"]["ZaakTypeInformatieObjectType"];
  };
  /** Deze lijst kan gefilterd wordt met query-string parameters. */
  zaaktype_list: {
    parameters: {
      query: {
        /** URL-referentie naar de CATALOGUS waartoe dit ZAAKTYPE behoort. */
        catalogus?: string;
        /** Unieke identificatie van het ZAAKTYPE binnen de CATALOGUS waarin het ZAAKTYPE voorkomt. */
        identificatie?: string;
        /** Multiple values may be separated by commas. */
        trefwoorden?: string;
        /**
         * filter objects depending on their concept status:
         * * `alles`: Toon objecten waarvan het attribuut `concept` true of false is.
         * * `concept`: Toon objecten waarvan het attribuut `concept` true is.
         * * `definitief`: Toon objecten waarvan het attribuut `concept` false is (standaard).
         */
        status?: string;
        /** Een pagina binnen de gepagineerde set resultaten. */
        page?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        headers: {
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
        };
        content: {
          "application/json": {
            count: number;
            next?: string | null;
            previous?: string | null;
            results: components["schemas"]["ZaakType"][];
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
  };
  /**
   * Maak een ZAAKTYPE aan.
   *
   * Er wordt gevalideerd op:
   * - geldigheid `catalogus` URL, dit moet een catalogus binnen dezelfde API zijn
   * - Uniciteit `catalogus` en `omschrijving`. Dezelfde omeschrijving mag enkel
   *   opnieuw gebruikt worden als het zaaktype een andere geldigheidsperiode
   *   kent dan bestaande zaaktypen.
   * - `deelzaaktypen` moeten tot dezelfde catalogus behoren als het ZAAKTYPE.
   */
  zaaktype_create: {
    parameters: {
      header: {
        /** Content type van de verzoekinhoud. */
        "Content-Type": "application/json";
      };
    };
    responses: {
      /** Created */
      201: {
        headers: {
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
          /** URL waar de resource leeft. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["ZaakType"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
    requestBody: components["requestBodies"]["ZaakType"];
  };
  /** Een specifieke ZAAKTYPE opvragen. */
  zaaktype_read: {
    parameters: {
      header: {
        /** Voer een voorwaardelijk verzoek uit. Deze header moet één of meerdere ETag-waardes bevatten van resources die de consumer gecached heeft. Indien de waarde van de ETag van de huidige resource voorkomt in deze set, dan antwoordt de provider met een lege HTTP 304 request. Zie [MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match) voor meer informatie. */
        "If-None-Match"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        headers: {
          /** De ETag berekend op de response body JSON. Indien twee resources exact dezelfde ETag hebben, dan zijn deze resources identiek aan elkaar. Je kan de ETag gebruiken om caching te implementeren. */
          ETag?: string;
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
        };
        content: {
          "application/json": components["schemas"]["ZaakType"];
        };
      };
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
  };
  /**
   * Werk een ZAAKTYPE in zijn geheel bij. Dit kan alleen als het een concept
   * betreft.
   *
   * Er wordt gevalideerd op:
   * - `deelzaaktypen` moeten tot dezelfde catalogus behoren als het ZAAKTYPE.
   */
  zaaktype_update: {
    parameters: {
      header: {
        /** Content type van de verzoekinhoud. */
        "Content-Type": "application/json";
      };
    };
    responses: {
      /** OK */
      200: {
        headers: {
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
        };
        content: {
          "application/json": components["schemas"]["ZaakType"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
    requestBody: components["requestBodies"]["ZaakType"];
  };
  /** Verwijder een ZAAKTYPE. Dit kan alleen als het een concept betreft. */
  zaaktype_delete: {
    responses: {
      /** No content */
      204: never;
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
  };
  /** Vraag de headers op die je bij een GET request zou krijgen. */
  zaaktype_headers: {
    parameters: {
      header: {
        /** Voer een voorwaardelijk verzoek uit. Deze header moet één of meerdere ETag-waardes bevatten van resources die de consumer gecached heeft. Indien de waarde van de ETag van de huidige resource voorkomt in deze set, dan antwoordt de provider met een lege HTTP 304 request. Zie [MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match) voor meer informatie. */
        "If-None-Match"?: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  /**
   * Werk een ZAAKTYPE deels bij. Dit kan alleen als het een concept betreft.
   *
   * Er wordt gevalideerd op:
   * - `deelzaaktypen` moeten tot dezelfde catalogus behoren als het ZAAKTYPE.
   */
  zaaktype_partial_update: {
    parameters: {
      header: {
        /** Content type van de verzoekinhoud. */
        "Content-Type": "application/json";
      };
    };
    responses: {
      /** OK */
      200: {
        headers: {
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
        };
        content: {
          "application/json": components["schemas"]["ZaakType"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      406: components["responses"]["406"];
      409: components["responses"]["409"];
      410: components["responses"]["410"];
      415: components["responses"]["415"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
    requestBody: components["requestBodies"]["ZaakType"];
  };
  /**
   * Een ZAAKTYPE beschrijft het geheel van karakteristieke eigenschappen van
   * zaken van eenzelfde soort.
   */
  zaaktype_publish: {
    parameters: {
      header: {
        /** Content type van de verzoekinhoud. */
        "Content-Type": "application/json";
      };
    };
    responses: {
      /** Created */
      201: {
        headers: {
          /** Geeft een specifieke API-versie aan in de context van een specifieke aanroep. Voorbeeld: 1.2.1. */
          "API-version"?: string;
          /** URL waar de resource leeft. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["ZaakType"];
        };
      };
    };
  };
}
